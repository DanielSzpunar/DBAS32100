/*
File: Daniel_Szpunar_DBAS32100Assignment2.sql
Author: Daniel Szpunar
Oracle Username: S11_SZPUNARD
Description: Assignment #2
*/
SET LINE 132

SET PAGESIZE 255


/*
1. Using analytic functions display the highest and the lowest carsaleprice 
for each make in SI database and rank them based on the highest price in 
descending order. (5 marks)
*/
SELECT
    c.carmake   AS "CAR MAKE"
   ,MAX(s.carsaleprice) AS "HIGHEST"
   ,MIN(s.carsaleprice) AS "LOWEST"
   ,dense_RANK()       
 OVER(
    ORDER BY
        MAX(carsaleprice) DESC
) AS "RANK"
FROM
    si.saleinv s
    INNER JOIN si.car c
    ON s.carserial = c.carserial
GROUP BY
    c.carmake;

/*
CAR MAKE      HIGHEST     LOWEST       RANK
---------- ---------- ---------- ----------
MERCEDES       466700        500          1
ACURA          300145        500          2
JAGUAR         228057      592.1          3
...7 rows
HYUNDAI         20000      20000         10
TOYOTA           6500       6500         11
NISSAN           6006       6006         12

13 rows selected. 
*/

/*
2. Using analytic functions return the name of the customer who bought the 
third most expensive car. (5 marks)
*/

WITH result AS (
    SELECT
        custname 
       ,carsaleprice
       ,DENSE_RANK() OVER(
            ORDER BY
                carsaleprice DESC
        ) AS denserank
    FROM
        si.saleinv
)
SELECT
    custname
   ,carsaleprice
FROM
    result
WHERE
    result.denserank = 3;

/*
CUSTNAME             CARSALEPRICE
-------------------- ------------
NIZETTE ROBAS           367095.57
*/

/*To verify the results from #2*/
SELECT
    custname AS "Customer"
   ,carsaleprice AS "Car Price"
   ,DENSE_RANK() OVER(
        ORDER BY
            carsaleprice DESC
    ) AS "Rank"
FROM
    si.saleinv;

/*
CUSTNAME             CARSALEPRICE  CAR_PRICE
-------------------- ------------ ----------
LEI WANG X                 466700          1
JIN HWAN OH                391300          2
NIZETTE ROBAS           367095.57          3
...215 rows
DANIEL PECHERLE               500        168
MARK DENNIS                   500        168
ERIC NGUYEN                   500        168
221 rows selected. 
*/

/*
3. For each customer from London, return the price of the car they bought 
and the difference between that price and the average price of the cars 
sold in that city. (5 marks)
*/
SELECT
    s.custname       AS "Customer"
   ,s.carsaleprice   AS "Purchase Price"
   , (
        SELECT
            round(AVG(carsaleprice),2)
        FROM
            si.saleinv
    ) AS "Avg Price"
   , (
        SELECT
            round(AVG(carsaleprice),2) - s.carsaleprice
        FROM
            si.saleinv
    ) AS "Difference From Avg."
FROM
    si.saleinv s
    INNER JOIN si.customer c
    ON c.custname = s.custname
WHERE
    c.custcity = 'LONDON'
    OR c.custcity = 'London';
/*
Customer             Purchase Price  Avg Price Difference From Avg.
-------------------- -------------- ---------- --------------------
STEPHEN BALINT              84354.4   73361.64            -10992.76
KANISHK SAHNI              37895.68   73361.64             35465.96
NICK ROSE                  75096.43   73361.64             -1734.79
NADINE MIDANY                113750   73361.64            -40388.36
JOON AN                      118000   73361.64            -44638.36
*/

/*
4. Options table is frequently used in queries that often require optiondesc 
as part of the condition. For example:
SELECT * FROM options WHERE optiondesc LIKE '%ROOF%';
Create an index that will improve the performance of this query. 
You can copy the table and the data from si.options table to test your code. 
Submit the code used for copying the table and the data, the code for creating 
the index, and the query performance with and without index as well as the 
results of your code execution and testing. You will have to use command 
line statements for explaining the plan and displaying it to be able to 
print the results on the console for copying. (5 marks)
*/
--Create table by copying si.options.
CREATE TABLE copy_options
    AS
        SELECT
            *
        FROM
            si.options;
--To drop copy_options remove the "--" and execute.
--DROP TABLE copy_options;

EXPLAIN PLAN
    FOR
SELECT
    *
FROM
    copy_options
WHERE
    optiondesc LIKE '%ROOF%';

SELECT
    *
FROM
    TABLE ( dbms_xplan.display() );
/*
Plan hash value: 3286094230
 
----------------------------------------------------------------------------------
| Id  | Operation         | Name         | Rows  | Bytes | Cost (%CPU)| Time     |
----------------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |              |     1 |    28 |     3   (0)| 00:00:01 |
|*  1 |  TABLE ACCESS FULL| COPY_OPTIONS |     1 |    28 |     3   (0)| 00:00:01 |
----------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   1 - filter("OPTIONDESC" LIKE '%ROOF%' AND "OPTIONDESC" IS NOT NULL)
*/

--Create the index
CREATE INDEX ix_copy_options_optiondesc ON
    copy_options (
        optiondesc
    );
--TO drop the index run the below command
--DROP INDEX IX_copy_options_optiondesc;
--Rerun the statement to display plan.
SELECT
    *
FROM
    TABLE ( dbms_xplan.display() );
/*
PLAN_TABLE_OUTPUT                                                                                                                   
------------------------------------------------------------------------------------------------------------------------------------
Plan hash value: 3757389162
 
------------------------------------------------------------------------------------------------------------------
| Id  | Operation                           | Name                       | Rows  | Bytes | Cost (%CPU)| Time     |
------------------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                    |                            |     1 |    28 |     2   (0)| 00:00:01 |
|   1 |  TABLE ACCESS BY INDEX ROWID BATCHED| COPY_OPTIONS               |     1 |    28 |     2   (0)| 00:00:01 |
|*  2 |   INDEX FULL SCAN                   | IX_COPY_OPTIONS_OPTIONDESC |     1 |       |     1   (0)| 00:00:01 |
------------------------------------------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   2 - filter("OPTIONDESC" LIKE '%ROOF%' AND "OPTIONDESC" IS NOT NULL)
*/

/*When rerunning the statement after creating an index the cost has been reduced from 3 to 2.*/



/*
5. Place all the SQL code that would perform the above written steps in one single file and run it as a
single transaction. Submit the results of the whole transaction. (5 marks)
The transaction output must contain:
1. Remove the table (this step will allow you to run your transaction multiple times without errors. 
Comment it out when you run the transaction the first time)
2. Create the table and copy the data from si.options
3. Explain plan command for the query shown in the previous question.
4. Display the plan
5. Create index for optiondesc column
6. Explain plan command for the query shown in the previous question.
7. Display the plan
*/

DROP TABLE copy_options;

CREATE TABLE copy_options
    AS
        SELECT
            *
        FROM
            si.options;

EXPLAIN PLAN
    FOR
SELECT
    *
FROM
    copy_options
WHERE
    optiondesc LIKE '%ROOF%';

SELECT
    *
FROM
    TABLE ( dbms_xplan.display() );

CREATE INDEX ix_copy_options_optiondesc ON
    copy_options (
        optiondesc
    );

EXPLAIN PLAN
    FOR
SELECT
    *
FROM
    copy_options
WHERE
    optiondesc LIKE '%ROOF%';

SELECT
    *
FROM
    TABLE ( dbms_xplan.display() );


/*
Table COPY_OPTIONS dropped.


Table COPY_OPTIONS created.


Explained.


PLAN_TABLE_OUTPUT                                                                                                                   
------------------------------------------------------------------------------------------------------------------------------------
Plan hash value: 3286094230
 
----------------------------------------------------------------------------------
| Id  | Operation         | Name         | Rows  | Bytes | Cost (%CPU)| Time     |
----------------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |              |     1 |    28 |     3   (0)| 00:00:01 |
|*  1 |  TABLE ACCESS FULL| COPY_OPTIONS |     1 |    28 |     3   (0)| 00:00:01 |
----------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   1 - filter("OPTIONDESC" LIKE '%ROOF%' AND "OPTIONDESC" IS NOT NULL)

13 rows selected. 


Index IX_COPY_OPTIONS_OPTIONDESC created.


Explained.


PLAN_TABLE_OUTPUT                                                                                                                   
------------------------------------------------------------------------------------------------------------------------------------
Plan hash value: 3757389162
 
------------------------------------------------------------------------------------------------------------------
| Id  | Operation                           | Name                       | Rows  | Bytes | Cost (%CPU)| Time     |
------------------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                    |                            |     1 |    28 |     2   (0)| 00:00:01 |
|   1 |  TABLE ACCESS BY INDEX ROWID BATCHED| COPY_OPTIONS               |     1 |    28 |     2   (0)| 00:00:01 |
|*  2 |   INDEX FULL SCAN                   | IX_COPY_OPTIONS_OPTIONDESC |     1 |       |     1   (0)| 00:00:01 |
------------------------------------------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   2 - filter("OPTIONDESC" LIKE '%ROOF%' AND "OPTIONDESC" IS NOT NULL)

14 rows selected.
*/